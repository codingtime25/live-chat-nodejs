{"version":3,"sources":["components/LoginForm.js","components/chats/Messages.js","components/chats/Sidebar.js","components/chats/ChatContainer.js","components/Layout.js","App.js","index.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","_this$props","socket","setUsername","username","state","emit","_this2","react_default","a","createElement","className","onSubmit","htmlFor","id","value","onChange","setState","target","type","maxLength","Component","Messages","scrollDown","bind","assertThisInitialized","messages","refs","scrollTop","scrollHeight","prevProps","prevState","chats","myUsername","ref","map","chat","index","msgAlign","key","message","SideBar","users","user","ChatContainer","addChatMessage","_ref","concat","console","log","addChatTyping","data","removeChatTyping","connected","typing","stopTyping","clearInterval","setTimeout","on","_this$state","Sidebar","style","width","chats_Messages","placeholder","socketUrl","Layout","initSocket","io","chats_ChatContainer","components_LoginForm","App","components_Layout","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ce9235db.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: ''\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const {socket, setUsername} = this.props\n    const { username } = this.state\n    if(username){\n      // Tell the server your username\n      socket.emit('add user', username);\n    }\n    setUsername(username)\n  }\n\n  render() {\n    const {username} = this.state\n\n    return (\n      <form className=\"login\" onSubmit={this.handleSubmit}>\n        <div className=\"login-form\">\n          <label htmlFor=\"username\"><h2>What's your username?</h2></label>\n          <input id=\"username\"\n            value={username}\n            onChange={e => {this.setState({username:e.target.value})}}\n            type=\"text\"\n            maxLength=\"14\" />\n        </div>\n      </form>\n    );\n  }\n\n}\n\nexport default LoginForm;\n","import React, { Component } from 'react';\n\nclass Messages extends Component {\n  constructor(props) {\n    super(props);\n\n    this.scrollDown = this.scrollDown.bind(this)\n  }\n\n  scrollDown(){\n    const { messages } = this.refs\n    messages.scrollTop = messages.scrollHeight\n  }\n\n  componentDidMount() {\n    this.scrollDown()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.scrollDown()\n  }\n\n  render() {\n    const {chats, myUsername} = this.props\n    return (\n      <ul ref=\"messages\" className=\"messages neutralize\">\n        {\n          chats.map((chat, index) => {\n            const msgAlign = chat.username === myUsername ? 'right' : ''\n            return (\n              <li key={index} className={msgAlign}>\n                <span className=\"m\">{chat.message}</span>\n                {chat.username !== myUsername && <span className=\"text-muted sender\">{chat.username}</span>}\n              </li>\n            )\n          })\n        }\n      </ul>\n    );\n  }\n\n}\n\nexport default Messages;\n","import React, { Component } from 'react';\n\nclass SideBar extends Component {\n\n  render() {\n    const {users} = this.props\n    return (\n      <div>\n        <h3>People</h3>\n        <ul className=\"user-list neutralize\">\n          {\n            users.map((user, index) => {\n              return <li key={index}>{user}</li>\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n\n}\n\nexport default SideBar;\n","import React, { Component } from 'react'\nimport Messages from './Messages'\nimport Sidebar from './Sidebar'\n\nclass ChatContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: null,\n      message: '',\n      typing: false,\n      chats: [],\n      users:[]\n    };\n  }\n\n  componentWillMount(){\n    const {socket} = this.props\n    // socket.emit('add user', 'manjil');\n\n    // Whenever the server emits 'login', log the login message\n    socket.on('login', (data) => {\n      this.setState({users: data.users})\n      console.log(data);\n    });\n\n     // Whenever the server emits 'user joined', log it in the chat body\n    socket.on('user joined', (data) => {\n      this.setState({users: data.users})\n      console.log(data);\n    });\n\n    // Whenever the server emits 'new message', update the chat body\n    socket.on('new message', (data) => {\n      this.addChatMessage(data);\n    });\n\n\n    // Whenever the server emits 'typing', show the typing message\n    socket.on('typing', (data) => {\n      this.addChatTyping(data);\n    });\n\n    // Whenever the server emits 'stop typing', kill the typing message\n    socket.on('stop typing', (data) => {\n      this.removeChatTyping(data);\n    });\n\n    // Whenever the server emits 'user left', log it in the chat body\n    socket.on('user left', (data) => {\n      this.setState({users: data.users})\n      console.log(data.username + ' left');\n      this.removeChatTyping(data);\n    });\n\n\n\n   this.setState({socket})\n  }\n\n  addChatMessage = ({username, message}) => {\n    const chat = {username, message}\n    this.setState({chats: this.state.chats.concat(chat)})\n    console.log(username, message);\n  }\n\n  addChatTyping = (data) => {\n    console.log(\"Typing\", data);\n  }\n\n  removeChatTyping = (data) => {\n    console.log(\"Stop Typing\", data);\n  }\n\n  // Sends a chat message\n  handleSubmit = e => {\n    e.preventDefault();\n    const {message} = this.state\n    const {username} = this.props\n    // if there is a non-empty message and a socket connection\n    if (message) {\n      this.addChatMessage({\n        username: username,\n        message: message\n      });\n\n      // tell server to execute 'new message' and send along one parameter\n      this.state.socket.emit('new message', message);\n    }\n    this.setState({message: ''})\n\n  }\n\n  onChange = e => {\n    const {connected} = this.props\n    if(connected){\n      if(!this.state.typing){\n        this.setState({typing: true})\n        this.state.socket.emit('typing');\n      }\n    }\n\n    if(this.stopTyping)\n      clearInterval(this.stopTyping)\n\n    this.stopTyping = setTimeout(() => {\n      if (this.state.typing) {\n        this.state.socket.emit('stop typing');\n        this.setState({typing: false})\n      }\n    }, 400);\n\n    this.setState({message: e.target.value})\n  }\n\n\n  render() {\n    const {message, users} = this.state\n    const {username} = this.props\n    return (\n      <section className=\"d-flex\">\n        <div id=\"sidebar\">\n          <Sidebar users={users}/>\n        </div>\n        <div style={{width:15+'px'}}>\n        </div>\n        <div id=\"chatbox\">\n          <Messages chats={this.state.chats} myUsername={username}/>\n          <form className=\"d-flex\" onSubmit={this.handleSubmit}>\n            <input\n              value= {message}\n              onChange={this.onChange} placeholder=\"Type here...\"/>\n            <button>Send</button>\n          </form>\n        </div>\n      </section>\n    );\n  }\n\n}\n\nexport default ChatContainer;\n","import React, { Component } from 'react'\nimport io from 'socket.io-client'\nimport LoginForm from './LoginForm'\nimport ChatContainer from './chats/ChatContainer'\n\nconst socketUrl = 'https://glacial-badlands-28940.herokuapp.com'\n\nclass Layout extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: '',\n      socket: null\n    };\n  }\n\n  componentWillMount() {\n    this.initSocket()\n  }\n\n  /*\n  * Connect to and initialize the socket.\n  */\n  initSocket = () => {\n    const socket = io(socketUrl)\n    socket.on('connect', () => {\n      console.log('Connected...');\n    })\n    this.setState({socket})\n  }\n\n  setUsername = username => {\n    this.setState({username})\n  }\n\n  render() {\n    const { socket, username  } = this.state\n    return (\n      <div className=\"mjl-container\">\n        {\n          !username ?\n          <LoginForm\n            username = {username}\n            setUsername = {this.setUsername}\n            socket={socket}/>\n          :\n          <ChatContainer\n            username = {username}\n            socket={socket}/>\n        }\n      </div>\n    );\n  }\n\n}\n\nexport default Layout;\n","import React from 'react';\nimport Layout from './components/Layout'\n\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}